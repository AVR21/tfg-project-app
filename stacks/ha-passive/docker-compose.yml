name: prod
services:
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.prod
    #image: URI
    ports:
      - "80:80"
    networks:
      - app-bridge
    depends_on:
      - backend

  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile.dev
    #image: URI
    ports:
      - "1337:1337"
    networks:
      - app-bridge
    env_file: .env
    depends_on:
      - db-master

  db-master:
    build:
      context: ./db/master
      dockerfile: Dockerfile
    restart: always
    env_file: .env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - master_data:/var/lib/postgresql/data
      - ./db/master/postgresql.conf:/var/lib/postgresql/postgresql.conf
      - ./db/master/pg_hba.conf:/var/lib/postgresql/pg_hba.conf
      - ./db/master/init-replication.sh:/docker-entrypoint-initdb.d/init-replication.sh
    command: ["postgres", "-c", "config_file=/var/lib/postgresql/postgresql.conf"]
    networks:
      - app-bridge

  db-replica:
    image: postgres:alpine
    restart: always
    env_file: .env
    environment:
      PRIMARY_HOST: ${PRIMARY_HOST}
      PRIMARY_PORT: ${PRIMARY_PORT}
      REPLICATION_USER: ${REPLICATION_USER}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    depends_on:
      - db-master
    volumes:
      - replica_data:/var/lib/postgresql/data
      - ./db/replica/standby-entrypoint.sh:/docker-entrypoint-initdb.d/standby-entrypoint.sh
    entrypoint: ["sh", "/docker-entrypoint-initdb.d/standby-entrypoint.sh"]
    networks:
      - app-bridge

volumes:
  master_data:
  replica_data:

networks:
  app-bridge:
    driver: bridge
    name: prod_bridge